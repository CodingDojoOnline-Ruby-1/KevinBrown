#_______________________________________________________________________________
# We are going to create a Bank Account class.
# This class will recreate some of the common Account transactions that normally occur for a bank account
# such as displaying your account number, checking and savings amount, total amount.
# Of course, there are also methods to invoke such as depositing a check, checking your balance, withdrawing money
#_______________________________________________________________________________
#  BankAccount should have a method that returns a user's account number, account number should be generated by a private method, account number should be random
# ==============================================================================
#  BankAccount should have a method that returns the user's checking account balance
# ==============================================================================
#  BankAccount should have a method that returns the user's saving account balance
# ==============================================================================
#  BankAccount should allow a user to deposit money into either their checking
#  or saving account
# ==============================================================================
#  BankAccount should allow a user to withdraw money from one of their accounts,
#  return an error if there are insufficient funds
# ==============================================================================
#  BankAccount should allow the user to view the total amount of money they have
#  at the bank
# ==============================================================================
#  BankAccount should track how many accounts the bank currently has
# ==============================================================================
#  BankAccount should have a private attribute called interest rate that is only
#  displayed when the user calls the method account_information
# ==============================================================================
#  BankAccount should have a method called account_information that displays the
#  users account number, total money, checking account balance, saving account
#  balance and interest rate
# ==============================================================================
#  A user should not be able to set any attributes from the BankAccount class
# ==============================================================================

class BankAccount
    @@total_accounts = 0

    #DO NOT USE attr_accessor
    #DO NOT ALLOW DIRECT ACCESS TO ACCOUTNS

    def initialize
        @account_number = 12345
        @balance_total = 0
        @interest_rate = 0.0025 #per month or 3% per year.
        @balance_savings = 0
        @balance_checking = 0
        @@total_accounts += 1
        puts "Your account, #{self}, has been created."
    end #initialize

    # ==========================================================================
    # Account Information Functions ============================================

    def show_account_id
        puts "Your account number is #{@account_number}."
        return account_number self #return account number, but allow chaining
    end #show_account_id


    def balance_checking
        puts "Your Balance is #{@balance_checking}."
        @balance_checking
    end #balance_checking


    def balance_savings
        puts "Your Balance is #{@balance_savings}."
        @balance_savings
    end #balance_savings

    def account_information
        puts "Account Number: #{@account_number}"
        puts "Total Money: #{@balance_total}"
        puts "Checking Balance: #{@balance_checking}"
        puts "Savings Balance: #{@balance_savings}"
        puts "Interest Rate: #{@interest_rate}"
        self
    end #account_information

    # Account Information Functions ============================================
    # ==========================================================================
    # Account Deposit Functions ================================================

    def deposit_checking funds
        @balance_checking += funds
        @balance_total += funds
        puts "#{funds} has been deposited.  Your new balance is #{@balance_checking}"
        self
    end #deposit_checking


    def deposit_savings funds
        @balance_savings += funds
        @balance_total += funds
        puts "#{funds} has been deposited.  Your new balance is #{@balance_savings}"
        self
    end #deposit_savings

    # Account Deposit Functions ================================================
    # ==========================================================================
    # Account Withdrawal Functions =============================================

    def fraud
        if !(@balance_total == @balance_checking + @balance_savings) then
            puts "I am sorry there is a problem with your account."
            @balance_checking = "#{@balance_checking}-frozen"
            return true
        else
            return false
        end #if
    end #fraud


    def withdraw_checking funds
        if fraud(self) then
            puts "Your acount has been frozen."
            return nil #do not allow futher activity
        elsif balance_checking >= funds then
            balance_checking -= funds
            @balance_total -= funds
            puts "#{funds} has been withdrawn.  Your new balance is #{@balance_checking}"
            self #do allow chaining in an allowable withdraw situation
        else
            puts "I am sorry #{funds} exceeds your total balance of #{@balance_checking}."
            return balance_checking #don't allow chaining in an over-balance situation
        end #if-fraud, process, or exceeds
    end #withdraw_checking


    def withdraw_savings funds
        if fraud(self) then #Checking for fraud
            puts "Your acount has been frozen."
            return nil
        elsif @balance_savings >= funds #Will this overdraw the account?
            @balance_savings -= funds
            @balance_total -= funds
            puts "#{funds} has been withdrawn.  Your new balance is #{@balance_savings}"
            self #do allow chaining in an allowable withdraw situation
        else
            puts "I am sorry #{funds} exceeds your total balance of #{@balance_savings}." #withdraw fail.
            return @balance_savings #don't allow chaining in an over-balance situation
        end #if-fraud, process, or exceeds
    end #withdraw_savings

    # Account Deposit Functions ================================================
    # ==========================================================================
    # Account Transfer Functions ===============================================

    def transfer_to_savings funds
    end

    def transfer_to_checking funds
    end

    # Account Transfer Functions ===============================================
    # ==========================================================================

end #BankAccount class

Todds_Account = BankAccount.new
Todds_Account.deposit_checking(12.53) #paycheck from coding dojo
Todds_Account.transfer_to_savings(1.00)
